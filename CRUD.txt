index.html
<!DOCTYPE html> 
<html lang="en"> 
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>Student CRUD</title>
    <script>
        async function createStudent() { 
        const studentData = {
        name: document.getElementById('name').value,
        age: document.getElementById('age').value,
        gender: document.getElementById('gender').value, 
        rollNumber: document.getElementById('rollNumber').value, 
        subjects: document.getElementById('subjects').value.split(','), 
        address: {
        street: document.getElementById('street').value, 
        city: document.getElementById('city').value, 
        zip: document.getElementById('zip').value
        } 
        };
        const response = await fetch('http://localhost:5000/api/students', { 
        method: 'POST',
        headers: {
        'Content-Type': 'application/json' 
        },
        body: JSON.stringify(studentData) 
        });
        const result = await response.json();alert(result.message); 
        }
        async function getStudent() {
        const rollNumber = document.getElementById('getRollNumber').value;
        const response = await fetch(`http://localhost:5000/api/students/${rollNumber}`);
        const result = await response.json();
        if (result.message) { 
        alert(result.message); 
        } else {
        document.getElementById('studentDetails').innerHTML = ` 
        <h2>Student Details</h2>
        <p><strong>Name:</strong> ${result.name}</p> 
        <p><strong>Age:</strong> ${result.age}</p>
        <p><strong>Gender:</strong> ${result.gender}</p>
        <p><strong>Roll Number:</strong> ${result.rollNumber}</p> 
        <p><strong>Subjects:</strong> ${result.subjects.join(', ')}</p>
        <p><strong>Address:</strong> ${result.address.street}, ${result.address.city}, ${result.address.zip}</p> 
        `;
        } 
        }
        async function updateStudent() {
        const rollNumber = document.getElementById('updateRollNumber').value; 
        const studentData = {
        name: document.getElementById('updateName').value,
        age: document.getElementById('updateAge').value,
        gender: document.getElementById('updateGender').value, 
        subjects: document.getElementById('updateSubjects').value.split(','), 
        address: {
        street: document.getElementById('updateStreet').value, 
        city: document.getElementById('updateCity').value,
        zip: document.getElementById('updateZip').value 
        }
        };
        const response = await fetch(`http://localhost:5000/api/students/${rollNumber}`, { 
        method: 'PUT',
        headers: {
        'Content-Type': 'application/json' 
        },
        body: JSON.stringify(studentData) 
        });
        const result = await response.json(); 
        alert(result.message);
        }
        async function deleteStudent() {
        const rollNumber = document.getElementById('deleteRollNumber').value;
        const response = await fetch(`http://localhost:5000/api/students/${rollNumber}`, { 
        method: 'DELETE'
        });
        const result = await response.json(); 
        alert(result.message);
        }
    </script> 
</head> 
<body>
    <h1>Student CRUD Operations</h1> 
    <h2>Create Student</h2>
    <form onsubmit="event.preventDefault(); createStudent();"> 
    <label for="name">Name:</label><br>49
    <input type="text" id="name" required><br>
    <label for="age">Age:</label><br>
    <input type="number" id="age" required><br>
    <label for="gender">Gender:</label><br>
    <input type="text" id="gender" required><br>
    <label for="rollNumber">Roll Number:</label><br>
    <input type="text" id="rollNumber" required><br>
    <label for="subjects">Subjects (comma separated):</label><br>
    <input type="text" id="subjects" required><br>
    <label for="street">Street:</label><br>
    <input type="text" id="street" required><br>
    <label for="city">City:</label><br>
    <input type="text" id="city" required><br>
    <label for="zip">Zip:</label><br>
    <input type="text" id="zip" required><br>
    <button type="submit">Create Student</button>
    </form>
    <h2>Get Student Details</h2>
    <form onsubmit="event.preventDefault(); getStudent();">
    <label for="getRollNumber">Roll Number:</label><br>
    <input type="text" id="getRollNumber" required><br>
    <button type="submit">Get Details</button>
    </form>50
    <div id="studentDetails"></div>
    <h2>Update Student</h2>
    <form onsubmit="event.preventDefault(); updateStudent();">
    <label for="updateRollNumber">Roll Number:</label><br>
    <input type="text" id="updateRollNumber" required><br>
    <label for="updateName">Name:</label><br>
    <input type="text" id="updateName" required><br>
    <label for="updateAge">Age:</label><br>
    <input type="number" id="updateAge" required><br>
    <label for="updateGender">Gender:</label><br>
    <input type="text" id="updateGender" required><br>
    <label for="updateSubjects">Subjects (comma separated):</label><br>
    <input type="text" id="updateSubjects" required><br>
    <label for="updateStreet">Street:</label><br>
    <input type="text" id="updateStreet" required><br>
    <label for="updateCity">City:</label><br>
    <input type="text" id="updateCity" required><br>
    <label for="updateZip">Zip:</label><br>
    <input type="text" id="updateZip" required><br>
    <button type="submit">Update Student</button>
    </form>
        <h2>Delete Student</h2>
        <form onsubmit="event.preventDefault(); deleteStudent();">51
        <label for="deleteRollNumber">Roll Number:</label><br> 
        <input type="text" id="deleteRollNumber" required><br> 
        <button type="submit">Delete Student</button>
    </form> 
</body> 
</html>



server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
// Initialize the app 
const app = express(); 
const port = 5000;
// Middleware 
app.use(cors());
app.use(bodyParser.json()); 
// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/school', { 
    useNewUrlParser: true,
    useUnifiedTopology: true 
    }).then(() => {
    console.log('MongoDB connected successfully'); 
    }).catch(err => {
    console.log('MongoDB connection error:', err); 
});
// Define the Student schema  
const studentSchema = new mongoose.Schema({
    name: String, 
    age: Number, 
    gender: String,
    rollNumber: { type: String, unique: true }, 
    subjects: [String],
    address: { 
    street: String, 
    city: String, 
    zip: String 
    }
});
// Create the Student model
const Student = mongoose.model('Student', studentSchema); 
// API endpoints
// Create: Add a new student
app.post('/api/students', async (req, res) => {
    const { name, age, gender, rollNumber, subjects, address } = req.body; 
    const student = new Student({
    name, 
    age, 
    gender, 
    rollNumber, 
    subjects, 
    address 
});
try {
    await student.save();
    res.status(201).json({ message: 'Student created successfully' });
    } catch (error) {
    res.status(500).json({ message: 'Error creating student', error }); 
}
});
// Read: Get a student by roll number
app.get('/api/students/:rollNumber', async (req, res) => { 
const { rollNumber } = req.params;
try {
    const student = await Student.findOne({ rollNumber }); 
    if (student) {
    res.json(student); 
    } else {
    res.status(404).json({ message: 'Student not found' }); 
    }
    } catch (error) {
    res.status(500).json({ message: 'Error fetching student', error }); 
}
});
// Update: Update student details
app.put('/api/students/:rollNumber', async (req, res) => { 
    const { rollNumber } = req.params;
    const { name, age, gender, subjects, address } = req.body; 
    try {
    const student = await Student.findOneAndUpdate( 
    { rollNumber },
    { name, age, gender, subjects, address }, 
    { new: true }
    );
    if (student) {
    res.json({ message: 'Student updated successfully', student }); 
    } else {
    res.status(404).json({ message: 'Student not found' }); 
    }
    } catch (error) {
    res.status(500).json({ message: 'Error updating student', error }); 
    }
});
// Delete: Delete a student by roll number
app.delete('/api/students/:rollNumber', async (req, res) => { 
    const { rollNumber } = req.params;
    try {
        const student = await Student.findOneAndDelete({ rollNumber }); 
        if (student) {
        res.json({ message: 'Student deleted successfully' }); 
        } else {
        res.status(404).json({ message: 'Student not found' }); 
        }
        } catch (error) {
        res.status(500).json({ message: 'Error deleting student', error }); 
    }
    });
    // Start the server 
    app.listen(port, () => {
        console.log(`Server running at http://localhost:${port}`); 
});